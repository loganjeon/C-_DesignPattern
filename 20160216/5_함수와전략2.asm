; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

	TITLE	C:\Users\Chansik Yun\Documents\Visual Studio 2015\Projects\20160216\5_함수와전략2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?add1@@YAHHH@Z					; add1
PUBLIC	?add2@@YAHHH@Z					; add2
PUBLIC	_main
; Function compile flags: /Odtp
; File c:\users\chansik yun\documents\visual studio 2015\projects\20160216\5_함수와전략2.cpp
_TEXT	SEGMENT
_n2$ = -12						; size = 4
_n1$ = -8						; size = 4
_f$ = -4						; size = 4
_main	PROC

; 9    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 10   : 	int n1 = add1(10, 20);

	push	20					; 00000014H
	push	10					; 0000000aH
	call	?add1@@YAHHH@Z				; add1
	add	esp, 8
	mov	DWORD PTR _n1$[ebp], eax

; 11   : 	int n2 = add2(10, 20);

	mov	eax, 10					; 0000000aH
	add	eax, 20					; 00000014H
	mov	DWORD PTR _n2$[ebp], eax

; 12   : 
; 13   : 	int(*f)(int, int) = &add2;

	mov	DWORD PTR _f$[ebp], OFFSET ?add2@@YAHHH@Z ; add2

; 14   : 	f(10, 20);

	push	20					; 00000014H
	push	10					; 0000000aH
	call	DWORD PTR _f$[ebp]
	add	esp, 8

; 15   : 
; 16   : 
; 17   : }

	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\chansik yun\documents\visual studio 2015\projects\20160216\5_함수와전략2.cpp
;	COMDAT ?add2@@YAHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?add2@@YAHHH@Z PROC					; add2, COMDAT

; 6    : inline int add2(int a, int b) { return a + b; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	pop	ebp
	ret	0
?add2@@YAHHH@Z ENDP					; add2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\chansik yun\documents\visual studio 2015\projects\20160216\5_함수와전략2.cpp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?add1@@YAHHH@Z PROC					; add1

; 5    :        int add1(int a, int b) { return a + b; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	pop	ebp
	ret	0
?add1@@YAHHH@Z ENDP					; add1
_TEXT	ENDS
END
