// 6_공통성과 가변성의 분리
// http://d.pr/n/18lXP

// 변하지 않는 것(공통성, 전체 알고리즘)에서 변하는 것(가변성, 정책)
// 을 분리하는 4가지 기술

// 1. 일반 함수에서 변해야 하는 정책
//  => 변하는 것을 함수 인자화 한다. (함수 포인터)
//  => 성능을 고려한다면 함수 포인터 대신 함수 객체를 사용. 단 코드 메모리 증가
//  => C++11 람다
//  => STL이 이 방식을 많이 사용하고 있다.

// 2. 멤버 함수에서 변해야 하는 정책
//  A. 변하는 것을 가상함수로 분리 
//   => 자식 클래스를 만들면서 재정의
//   => Template Method 패턴
//   => 정책을 실행 시간에 교체하는 것이 불가능하고, 정책의 재사용성은 좋지 않다.

//  B. 변하는 것을 인터페이스 기반 클래스로 분리
//   => 인터페이스 기반 정책 클래스
//   => Strategy 패턴
//   => 가상 함수 기반이므로 성능 저하가 있다.

// 3. 실행 시간에 변경할 필요가 없다면
//   => 변하는 것 템플릿 인자로 한다.
//   => 단위 전략(Policy based Design)
//   => 속도가 빠르다. 단점, 실행 시간에 교체가 불가능하다.

// 스캇 마이어스(4.27 ~ 29)
// Effective C++
// Modern Effective C++
