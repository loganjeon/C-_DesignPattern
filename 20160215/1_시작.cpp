// http://d.pr/n/1kvkS

// Compile : Ctrl + F7
// Compile + Run : Ctrl + F5

#include <iostream>
using namespace std;

int main()
{
	cout << "Hello Design Pattern" << endl;
}

// 디자인 패턴 / 리팩토링
// 1. 디자인 패턴 결론
// : 우리의 디자인 패턴은 리팩토링의 결과로 나온 구조를 반영한다.
//   디자인 패턴은 리팩토링의 목표점이 된다.
// 2. 리팩토링 서문
// : 패턴과 리팩토링의 사이에는 자연스러운 관계가 있다.
//   패턴은 도달하고 싶은 곳이고, 리팩토링은 그곳으로 가는 방법이다.

// 객체지향 5대 원칙 (SOLID) - 로버트 C 마틴
// 1. SRP(단일 책임 원칙)
//  - 모듈은 단 하나만의 책임을 가져야 한다.

// 2. OCP(개방 폐쇄 원칙)
//  - 모듈은 수정에는 닫혀 있고, 확장에는 열려 있어야 한다.

// 3. LSP(리스코프 치환 원칙)
//  - 자식 클래스는 부모 클래스로 대체 가능해야 한다.
//  - 자식의 공통된 기능은 부모 클래스로부터 와야 한다.

// 4. ISP(인터페이스 분리 원칙) - 인터페이스 단일 책임의 원칙
//  - 범용 인터페이스보다는 세분화된 인터페이스가 낫다.

// 5. DIP(의존 관계 역전 원칙)
//  - 클라이언트는 구체 클래스에 의존하는 것이 아니라 
//    인터페이스나 추상 클래스에 의존해야 한다.

// http://d.pr/n/1h8KS